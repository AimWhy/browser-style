ui-icon {
	aspect-ratio: 1 / 1;
	background-color: var(--ui-icon-bg, color-mix(in srgb, var(--ui-icon-c, currentColor), #FFF 80%));
	border-radius: 50%;
	border-width: 0;
	color: var(--ui-icon-c, currentColor);
	display: grid;
	inline-size: var(--ui-icon-is, 1.875rem);
	place-content: center;
	place-self: center;
	transition: all .16s ease-in;
}

ui-icon svg {
	fill: none;
	max-block-size: var(--ui-iconsize, 65%);
	max-inline-size: var(--ui-iconsize, 65%);
	place-self: center;
	stroke: currentColor;
	stroke-linecap: round;
	stroke-linejoin: round;
	stroke-width: var(--ui-stroke-w, 1.25);
}

ui-icon[invert] {
	background-color: var(--ui-icon-c);
	color: var(--ui-icon-bg, color-mix(in srgb, var(--ui-icon-c), #FFF 90%));
}

/* === COLORS === */
ui-icon[color~="carnelian"] { --ui-icon-c: var(--ui-c-carnelian); }
ui-icon[color~="cybergrape"] { --ui-icon-c: var(--ui-c-cybergrape); }
ui-icon[color~="mahogany"] { --ui-icon-c: var(--ui-c-mahogany); }
ui-icon[color~="orange"] { --ui-icon-c: var(--ui-c-orange); }
ui-icon[color~="pearl"] { --ui-icon-c: var(--ui-c-pearl); }
ui-icon[color~="skobeloff"] { --ui-icon-c: var(--ui-c-skobeloff); }
ui-icon[color~="viridian"] { --ui-icon-c: var(--ui-c-viridian); }
ui-icon[color~="transparent"] { --ui-icon-bg: transparent; }
ui-icon[color~="warmgray"] { --ui-icon-c: var(--ui-c-warmgray); }

/* === SIZES === */
ui-icon[size~="xs"] { --ui-icon-is: 1.15rem; --ui-stroke-w: 2; }
ui-icon[size~="sm"] { --ui-icon-is: 1.5rem; }
ui-icon[size~="md"] { --ui-icon-is: 1.875rem; }
ui-icon[size~="lg"] { --ui-icon-is: 2.5rem; }
ui-icon[size~="xl"] { --ui-icon-is: 3.5rem; }
ui-icon[iconsize~="xs"] { --ui-iconsize: 40%; }
ui-icon[iconsize~="sm"] { --ui-iconsize: 55%; }
ui-icon[iconsize~="md"] { --ui-iconsize: 70%; }
ui-icon[iconsize~="lg"] { --ui-iconsize: 85%; }
ui-icon[iconsize~="xl"] { --ui-iconsize: 100%; }

/* === HOVER === */
@media (hover: hover) {
	:where(ui-icon:not([invert])):hover {
		background-color: var(--ui-icon-c);
		color: color-mix(in srgb, var(--ui-icon-c), #FFF 80%);
	}

	:where(ui-icon[invert]):hover {
		background-color: color-mix(in srgb, var(--ui-icon-c), #000 40%);
	}

	/* === SCALES === */
	ui-icon[scale="xs"]:hover { scale: 0.95; }
	ui-icon[scale="sm"]:hover { scale: 1.05; }
	ui-icon[scale="md"]:hover { scale: 1.1; }
	ui-icon[scale="lg"]:hover { scale: 1.25; }
	ui-icon[scale="xl"]:hover { scale: 1.5; }
}

/* === DARK MODE === */
@container style(--ui-cs: dark) {
	ui-icon {
		/* Optimally, we'd deduct saturation from the color, but that's not possible in CSS yet: hsl(from var(--ui-icon-c), calc(s - 30%), l) */
		background: color-mix(in srgb, var(--ui-icon-c), #000 20%);
		color: color-mix(in srgb, var(--ui-icon-c), #FFF 60%);
	}
}