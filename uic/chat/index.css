/**
 * Chat
 * @param {color}  --chat-start-bg - Background color of the chat entry
 * @param {color}  --chat-start-c - Text color of the chat entry
 * @param {color}  --chat-end-bg - Background color of the chat entry
 * @param {color}  --chat-end-c - Text color of the chat entry
 * @param {color}  --chat-time-c - Text color of the time
 * @param {length} --chat-mi - Inline margin
 * @param {length} --chat-mis - Inline max size
 * @description Chat. An `<li value="1">` is a message from the other person, `<li value="2">` is a message from the user.
 */
 :where(ol[data-uic~="chat"]) {
	--chat-start-bg: #e9e9eb;
	--chat-start-c: #222;
	--chat-end-bg: #007aff;
	--chat-end-c: #fff;
	--chat-time-c: var(--color-gray-7);

	/* Private consts */
	--_chat-tail: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" viewBox="0 0 13 13"> <path d="M.556 12.718c5.2.8 10.334-2.063 12-3.897-1.718-4.096-7-9.362-7-8.603 0 10.5-6 11.897-5 12.5Z"/></svg>');
	--_chat-tail-offset: .5em;
	--_chat-tail-sz: 20px;
	--_chat-gap: .33em;

	display: grid;
	max-inline-size: var(--chat-mis, 30rem);
	margin-inline: var(--chat-mi, auto);
	row-gap: calc(2 * var(--_chat-gap));

	& li {
		display: grid;
		row-gap: var(--_chat-gap);
		& a {
			cursor: pointer;
			text-decoration: underline;
		}
		& code {
			background: rgba(255, 255, 255, .2);
			font-family: ui-monospace, monospace;
			padding: 2px;
		}
		& li {
			display: flex;
			&:has([data-uic~=avatar]) { gap: calc(2 * var(--_chat-gap)); }
			& [data-uic~=avatar] { place-self: end; }
		}
		& ol {
			display: grid;
			max-inline-size: 80%;
			row-gap: var(--_chat-gap);
			& li:not(:last-of-type) [data-uic~=chat-entry]::after {
				display: none;
			}
		}
		& time {
			display: block;
			font-size: var(--chat-time-fz, x-small);
		}
		& > time {
			color: var(--chat-time-c);
			text-align: center;
		}

		&[value="1"]:dir(rtl) { --_chat-tail-trsf: scaleX(-1); }
		&[value="2"] {
			--_chat-bg: var(--chat-end-bg);
			--_chat-c: var(--chat-end-c);
			--_chat-tail-ii: auto calc(0px - var(--_chat-tail-offset));
			& li, & ol { justify-self: end; }
			& [data-uic~=avatar] { order: 2; }
			&:dir(ltr) { --_chat-tail-trsf: scaleX(-1);}
		}
	}
}
/* Chat entry */
:where([data-uic~="chat-entry"]) {
	background: var(--_chat-bg, var(--chat-start-bg));
	border-radius: var(--_chat-entry-bdrs, 18px);
	color: var(--_chat-c, var(--chat-start-c));
	font-size: var(--_chat-entry-fz, inherit);
	line-height: var(--_chat-entry-lh, 1.3);
	padding: var(--_chat-entry-p, .75em 1em);
	position: relative;

	/* tail */
	&::after {
		background: inherit;
		bottom: .15em;
		content: "";
		display: block;
		height: var(--_chat-tail-sz);
		inset-inline: var(--_chat-tail-ii, calc(0px - var(--_chat-tail-offset)) auto);
		-webkit-mask: var(--_chat-tail) no-repeat;
		mask: var(--_chat-tail) no-repeat;
		position: absolute;
		transform: var(--_chat-tail-trsf, none);
		width: var(--_chat-tail-sz);
	}
	& time {
		margin-block-start: var(--_chat-entry-time-mbs, var(--_chat-gap));
		text-align: end;
	}
	&:has(img:only-child) {
		padding: var(--_chat-img-p, .5em);
		& img {
			border-radius: calc(var(--_chat-entry-bdrs, 18px) - var(--_chat-img-p, .5em));
		}
	}
}