:host * { box-sizing: border-box; }
:host {
	--gui-app-icon-sz: 1.5rem;

	--blue: light-dark(#007AFF, #0B84FF);
	--gray-1: light-dark(#8E8E93, #8E8E93);
	--gray-2: light-dark(#AEAEB2, #636366);
	--gray-3: light-dark(#C7C7CC, #48484A);
	--gray-4: light-dark(#D1D1D6, #3A3A3C);
	--gray-5: light-dark(#E5E5EA, #2C2C2E);
	--gray-6: light-dark(#F2F2F7, #1C1C1E);

	--gui-app-bdw: 1px;
	--gui-app-bdc: light-dark(#DEDEE0, #000000);
	--gui-app-c: light-dark(#222222, #CBCBCB);
	--gui-app-main-bg: light-dark(#EDECEC, #1C1C1E);
	--gui-app-panels-bg: light-dark(#FFFFFF, #2C2C2C);
	--gui-app-regions-bg: light-dark(#FFFFFF, #282828);

	block-size: 100dvh;
	color: var(--gui-app-c, inherit);
	color-scheme: dark light;
	container-type: inline-size;
	display: grid;
	font-family: var(--gui-app-ff, ui-sans-serif, system-ui);
	font-size: 1rem;
	grid-template: auto 1fr var(--gui-app-footer-h, auto) / min-content 1fr min-content;
	interpolate-size: allow-keywords;
}

:host::part(footer) {
	background: var(--gui-app-footer-bg, var(--gui-app-regions-bg));
	border-block-start: var(--gui-app-bdw) solid var(--gui-app-bdc);
	color: var(--gui-app-footer-c, inherit);
	font-size: var(--gui-app-footer-fs, .875rem);
	grid-column: 1 / 4;
	padding: var(--gui-app-footer-p, 1ch);
}

:host::part(header) {
	align-items: center;
	background: var(--gui-app-header-bg, var(--gui-app-regions-bg));
	border-block-end: var(--gui-app-bdw) solid var(--gui-app-bdc);
	color: var(--gui-app-header-c, inherit);
	display: grid;
	font-size: var(--gui-app-header-fs, .875rem);
	grid-column: 1 / 4;
	grid-template-columns: min-content 1fr min-content;
	padding: var(--gui-app-header-p, .5em 1em);
}

:host::part(icon) {
	fill: none;
	height: var(--gui-app-icon-sz);
	pointer-events: none;
	stroke: currentColor;
	stroke-linecap: round;
	stroke-linejoin: round;
	stroke-width: 2;
	width: var(--gui-app-icon-sz);
}

:host::part(main) {
	background: var(--gui-app-main-bg);
	grid-column: 2 / 3;
	padding: var(--gui-app-main-p, 2ch);
}

:host::part(title) {
	text-align: center;
}

/* GuiPanel, GuiTabs */
::slotted([slot="panel-start"]), 
::slotted([slot="panel-end"]) {
	--gui-panel-bg: var(--gui-app-panels-bg);
	--gui-panel-c: var(--gui-app-c);
	--gui-panel-bxsh: 0px 0px 1px 1px var(--gui-app-bdc);
	--gui-panel-docked-miw: 60;
	--gui-panel-gap: .5rem;
	--gui-tabs-panels-p: 4px 10px;
	--gui-tabs-tabs-m: 6px;

	transition: width .2s ease;
}

/* Panels are not toggled on, and not in popover mode */
:host([panel-start=closed]) ::slotted([slot="panel-start"]:not([popover])),
:host([panel-end=closed]) ::slotted([slot="panel-end"]:not([popover])) {
	overflow: clip;
	width: 0;
}

/* Start panel is visible and docked */
:host([panel-start="open"][panel-start-docked=true]) [part="main"] {
	border-inline-start: var(--gui-app-bdw) solid var(--gui-app-bdc);
}

/* End panel is visible and docked */
:host([panel-end=open][panel-end-docked=true]) [part="main"] {
	border-inline-end: var(--gui-app-bdw) solid var(--gui-app-bdc);
}

/* Both panels are visible and docked */
:host([panel-start=open][panel-start-docked=true][panel-end=open][panel-end-docked=true]) [part="main"] {
	border-inline: var(--gui-app-bdw) solid var(--gui-app-bdc);
}

/* Toggle Icons */
:host::part(toggle-panel-end), :host::part(toggle-panel-start) {
	all: unset;
}
:host([panel-end=open])::part(panel-end-icon),
:host([panel-start=open])::part(panel-start-icon) { color: var(--blue); }

/* Disable toggle-icons when panel is a popover */
:host([panel-start-docked=false])::part(panel-start-icon),
:host([panel-end-docked=false])::part(panel-end-icon) {
	color: var(--gray-4);
	pointer-events: none;
}
