/* === ANIMATIONS === */
[animation] {
	--_dg: attr(degree type(<degree>), 100deg);
	--_tx: attr(trans-x type(<length>), 55px);
	--_ty: attr(trans-y type(<length>), 110px);
	--_txv: attr(trans-x-viewport type(<length>), 100vw);
	--_tyv: attr(trans-y-viewport type(<length>), 100vh);
	--_zi: attr(zoom-in type(<number>), 0.6);
	--_zo: attr(zoom-out type(<number>), 1.2);
}

[animation~="bounce"] { --_animn: bounce-in; }
[animation~="bounce-in-left"] { --_animn: bounce-in-left; }
[animation~="bounce-in-right"] { --_animn: bounce-in-right; }
[animation~="bounce-in-up"] { --_animn: bounce-in-up; }
[animation~="bounce-in-down"] { --_animn: bounce-in-down; }
[animation~="fade-down"] { --_animn: fade-down; }
[animation~="fade-down-left"] { --_animn: fade-down-left; }
[animation~="fade-down-right"] { --_animn: fade-down-right; }
[animation~="fade"] { --_animn: fade-in; }
[animation~="fade-in-scale"] { --_animn: fade-in-scale; }
[animation~="fade-left"] { --_animn: fade-left; }
[animation~="fade-out"] { --_animn: fade-out; }
[animation~="fade-out-scale"] { --_animn: fade-out-scale; }
[animation~="fade-right"] { --_animn: fade-right; }
[animation~="fade-up"] { --_animn: fade-up; }
[animation~="fade-up-left"] { --_animn: fade-up-left; }
[animation~="fade-up-right"] { --_animn: fade-up-right; }
[animation~="flip-diagonal"] { --_animn: flip-diagonal; }
[animation~="flip-down"] { --_animn: flip-down; }
[animation~="flip-left"] { --_animn: flip-left; }
[animation~="flip-right"] { --_animn: flip-right; }
[animation~="flip-up"] { --_animn: flip-up; }
[animation~="reveal"] { --_animn: reveal; }
[animation~="reveal-circle"] { --_animn: reveal-circle; }
[animation~="reveal-polygon"] { --_animn: reveal-polygon; }
[animation~="slide-down"] { --_animn: slide-down; }
[animation~="slide-in"] { --_animn: slide-in; }
[animation~="slide-out"] { --_animn: slide-out; }
[animation~="slide-up"] { --_animn: slide-up; }
[animation~="zoom-in"] { --_animn: zoom-in; }
[animation~="zoom-in-rotate"] { --_animn: zoom-in-rotate; }
[animation~="zoom-out"] { --_animn: zoom-out; }
[animation~="zoom-out-rotate"] { --_animn: zoom-out-rotate; }

/* Secondary Animations */
[animation~="opacity"] { --_animn2: opacity; }
[animation~="fade-in"] { --_animn2: fade-in; }
[animation~="fade-out"] { --_animn2: fade-out; }

/* child items */
[animation~="items-slide-up"] > * { translate: 0 50px; }
[animation~="items-slide-down"] > * { translate: 0 -50px; }
[animation~="items-slide-left"] > * { translate: 50px 0; }
[animation~="items-slide-right"] > * { translate: -50px 0; }

/* === RANGES === */
[range="contain"] {
	--_animrs: entry 0%;
	--_animre: contain 50%;
}
[range="cover"] {
	--_animrs: entry 25%;
	--_animre: cover 50%;
}
[range="exit"] {
	--_animrs: exit 0%;
	--_animre: exit 100%;
}

@supports (view-transition-name: none) {
	:where([animation]) {
		animation: var(--_animn, none), var(--_animn2, none);
		animation-timing-function: var(--animtm, linear);
		animation-fill-mode: var(--animfm, forwards);
		animation-timeline: view();
		animation-range: var(--_animrs, entry 0%) var(--_animre, entry 75%);
	}
	/* Child items slide in after parent, but not if parent is exiting */
	/* :where([animation*="items-slide-"]:not([range="exit"]) > *) {
		animation: items-slide 0.25s ease-out both;
		animation-delay: calc(sibling-index() * 150ms);
		animation-timeline: view();
		animation-range: var(--_animre, entry 75%) entry 100%;
	} */
}

/* === KEYFRAMES === */

/* Opacity */
@keyframes opacity {
	0% { opacity: 0; }
	100% { opacity: 1; }
}
@keyframes fade-in {
	0%, 20% { opacity: 0; }
	100% { opacity: 1; }
}
@keyframes fade-out {
	0% { opacity: 1; }
	100% { opacity: 0; }
}

/* Bounce - using custom properties */
@keyframes bounce-in {
	0% { scale: 0.3; }
	50% { scale: 1.05; }
	70% { scale: 0.9; }
	100% { scale: 1; }
}
@keyframes bounce-in-down {
	0% { translate: 0 calc(-1 * var(--_tyv)); }
	60% { translate: 0 calc(var(--_tyv) * 0.1); }
	80% { translate: 0 calc(var(--_tyv) * -0.05); }
	100% { translate: 0; }
}
@keyframes bounce-in-left {
	0% { translate: calc(-1 * var(--_txv)) 0; }
	60% { translate: calc(var(--_txv) * 0.05) 0; }
	80% { translate: calc(var(--_txv) * -0.025) 0; }
	100% { translate: 0; }
}
@keyframes bounce-in-up {
	0% { translate: 0 var(--_tyv); }
	60% { translate: 0 calc(var(--_tyv) * -0.1); }
	80% { translate: 0 calc(var(--_tyv) * 0.05); }
	100% { translate: 0; }
}
@keyframes bounce-in-right {
	0% { translate: var(--_txv) 0; }
	60% { translate: calc(var(--_txv) * -0.05) 0; }
	80% { translate: calc(var(--_txv) * 0.025) 0; }
	100% { translate: 0; }
}

/* Fade - using custom properties */
@keyframes fade-down {
	0% { translate: 0px calc(-1 * var(--_ty)); }
	100% { translate: 0; }
}
@keyframes fade-down-left {
	0% { translate: calc(-1 * var(--_tx)) calc(-1 * var(--_ty)); }
	100% { translate: 0; }
}
@keyframes fade-down-right {
	0% { translate: var(--_tx) calc(-1 * var(--_ty)); }
	100% { translate: 0; }
}
@keyframes fade-left {
	0% { translate: calc(-1 * var(--_tx)) 0px; }
	100% { translate: 0; }
}
@keyframes fade-right {
	0% { translate: var(--_tx) 0px; }
	100% { translate: 0; }
}
@keyframes fade-up {
	0% { translate: 0px var(--_ty); }
	100% { translate: 0; }
}
@keyframes fade-up-left {
	0% { translate: calc(-1 * var(--_tx)) var(--_ty); }
	100% { translate: 0; }
}
@keyframes fade-up-right {
	0% { translate: var(--_tx) var(--_ty); }
	100% { translate: 0; }
}

/* Scale animations */
@keyframes fade-in-scale {
	0% { transform: scale(0.8); }
	100% { transform: scale(1); }
}
@keyframes fade-out-scale {
	0% { transform: scale(1); }
	100% { transform: scale(0.8); }
}

/* Flip - using custom properties */
@keyframes flip-diagonal {
	0% {
		backface-visibility: hidden;
		transform: perspective(2500px) rotateX(calc(0deg - var(--_dg))) rotateY(calc(0deg - var(--_dg)));
	}
	100% { transform: perspective(2500px) rotateX(0) rotateY(0); }
}
@keyframes flip-down {
	0% {
		backface-visibility: hidden;
		transform: perspective(2500px) rotateX(var(--_dg));
	}
	100% { transform: perspective(2500px) rotateX(0); }
}
@keyframes flip-left {
	0% {
		backface-visibility: hidden;
		transform: perspective(2500px) rotateY(calc(0deg - var(--_dg)));
	}
	100% { transform: perspective(2500px) rotateY(0); }
}
@keyframes flip-right {
	0% {
		backface-visibility: hidden;
		transform: perspective(2500px) rotateY(var(--_dg));
	}
	100% { transform: perspective(2500px) rotateY(0); }
}
@keyframes flip-up {
	0% {
		backface-visibility: hidden;
		transform: perspective(2500px) rotateX(calc(0deg - var(--_dg)));
	}
	100% { transform: perspective(2500px) rotateX(0); }
}

/* Reveal - keeping opacity as they're integral to the effect */
@keyframes reveal {
	0% {
		opacity: 0;
		clip-path: inset(45% 20% 45% 20%);
	}
	100% {
		opacity: 1;
		clip-path: inset(0% 0% 0% 0%);
	}
}
@keyframes reveal-circle {
	0% {
		opacity: 0;
		clip-path: circle(0% at 50% 50%);
	}
	100% {
		opacity: 1;
		clip-path: circle(100% at 50% 50%);
	}
}
@keyframes reveal-polygon {
	0% {
		opacity: 0;
		clip-path: polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
	}
	100% {
		opacity: 1;
		clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%);
	}
}

/* Slide - using custom properties */
@keyframes slide-down {
	0% { translate: 0 calc(-1 * var(--_tyv)); }
	100% { translate: 0; }
}
@keyframes slide-in {
	0% { translate: calc(-1 * var(--_txv)) 0; }
	100% { translate: 0; }
}
@keyframes slide-out {
	0% { translate: 0; }
	100% { translate: var(--_txv) 0; }
}
@keyframes slide-up {
	0% { translate: 0 var(--_tyv); }
	100% { translate: 0; }
}

/* Zoom - using custom properties */
@keyframes zoom-in {
	0% { scale: var(--_zi); }
	100% { scale: 1; }
}
@keyframes zoom-in-rotate {
	0% {
		scale: var(--_zi);
		rotate: -180deg;
	}
	100% {
		scale: 1;
		rotate: 0deg;
	}
}
@keyframes zoom-out {
	0% { scale: var(--_zo); }
	100% { scale: 1; }
}
@keyframes zoom-out-rotate {
	0% {
		scale: 1;
		transform: rotate(0deg);
	}
	100% {
		scale: var(--_zo);
		transform: rotate(-180deg);
	}
}

@keyframes items-slide {
	to { translate: 0 0; }
}
